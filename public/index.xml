<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>資深菜鳥 Nick</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 資深菜鳥 Nick</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Dec 2024 10:06:49 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Angular 和 Vue 的響應式狀態管理</title>
      <link>http://localhost:1313/post/angular%E5%92%8Cvue%E7%9A%84%E9%9F%BF%E6%87%89%E5%BC%8F%E7%8B%80%E6%85%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 27 Dec 2024 10:06:49 +0800</pubDate>
      <guid>http://localhost:1313/post/angular%E5%92%8Cvue%E7%9A%84%E9%9F%BF%E6%87%89%E5%BC%8F%E7%8B%80%E6%85%8B%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;之前趁著 &lt;code&gt;Udemy&lt;/code&gt; 黑五活動買了些有興趣的課程來進修，加上 &lt;code&gt;YT&lt;/code&gt; 上免費的課程，聽聽不同的講師會有不同的收穫，就像是看醫生不要只看一間，不同的醫生看或許會有不同的見解。&lt;/p&gt;&#xA;&lt;p&gt;在自學時光是 &lt;code&gt;Vue&lt;/code&gt; 就看了三個不同的教學影片，對於 &lt;code&gt;ref&lt;/code&gt;、&lt;code&gt;reactive&lt;/code&gt; 雖無實務經驗，但有一定程度的瞭解。之前工作上使用的框架是 &lt;code&gt;Angular&lt;/code&gt; 且版本 &lt;strong&gt;&amp;lt; 16&lt;/strong&gt; , 對於 &lt;code&gt;Signals&lt;/code&gt; 的應用很模糊，嘗試用 &lt;code&gt;Vue&lt;/code&gt; 的 &lt;code&gt;ref&lt;/code&gt; 去解釋 &lt;code&gt;Angular&lt;/code&gt; 的 &lt;code&gt;Signals&lt;/code&gt; 好像一切都說得過去了！&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;angular-signals-的用途&#34;&gt;&lt;strong&gt;Angular Signals 的用途&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Angular&lt;/code&gt; 引入 &lt;strong&gt;Signals&lt;/strong&gt; 是為了解決 &lt;strong&gt;響應式狀態管理&lt;/strong&gt; 的問題。傳統上 &lt;code&gt;Angular&lt;/code&gt; 主要使用 &lt;code&gt;RxJS&lt;/code&gt; 的 &lt;code&gt;Observables&lt;/code&gt; 或 &lt;code&gt;Component State&lt;/code&gt; 來管理狀態，但這種方式可能導致程式碼複雜性增加、追蹤數據變化困難。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Signals 主要用途：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;響應式狀態管理：&lt;/strong&gt; &lt;code&gt;Signals&lt;/code&gt; 允許你輕鬆追蹤和響應狀態變化，無需手動訂閱或處理變更檢測。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;效能提升：&lt;/strong&gt; &lt;code&gt;Signals&lt;/code&gt; 會在狀態變化時自動觸發 UI 更新，並只更新受影響的部分，而非整體重新渲染，這比傳統變更檢測更高效。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;同步數據流：&lt;/strong&gt; 和 &lt;code&gt;RxJS&lt;/code&gt; 的異步操作不同，&lt;code&gt;Signals&lt;/code&gt; 提供 &lt;strong&gt;同步&lt;/strong&gt; 的數據流，使用起來更加直觀。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;預測性：&lt;/strong&gt; &lt;code&gt;Angular Signals&lt;/code&gt; 透過明確的讀寫 &lt;code&gt;API&lt;/code&gt;，讓數據變更更易於預測和調試。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;signal&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@angular/core&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyComponent&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signal&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;signal()&lt;/code&gt; 用於建立可追蹤的響應式狀態。&lt;/li&gt;&#xA;&lt;li&gt;使用 &lt;code&gt;.set()&lt;/code&gt;、&lt;code&gt;.update()&lt;/code&gt; 來修改值，使用 &lt;code&gt;signal()&lt;/code&gt; 本身讀取當前值。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;vue-3-ref-的用途&#34;&gt;&lt;strong&gt;Vue 3 ref 的用途&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Vue 3&lt;/code&gt; 的 &lt;code&gt;ref&lt;/code&gt; 也用於 響應式數據 管理。&lt;code&gt;ref&lt;/code&gt; 會將一個變數包裹成 響應式對象，當數據變化時，&lt;code&gt;Vue&lt;/code&gt; 會自動追蹤變更並更新 UI。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ES6 作用域的比較</title>
      <link>http://localhost:1313/post/es6-%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%AF%94%E8%BC%83/</link>
      <pubDate>Thu, 26 Dec 2024 15:37:37 +0800</pubDate>
      <guid>http://localhost:1313/post/es6-%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%AF%94%E8%BC%83/</guid>
      <description>&lt;h2 id=&#34;constlet-與-var&#34;&gt;const、let 與 var&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;var&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;作用域：&lt;/strong&gt;&#xA;&lt;code&gt;var&lt;/code&gt;是函式作用域（Function Scope）。在函式內宣告的變數僅在該函式內可用，若在函式外使用，則為全域作用域（Global Scope）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hoisting（提升）：&lt;/strong&gt;&#xA;&lt;code&gt;var&lt;/code&gt; 宣告的變數會被提升到作用域的頂部（包括全域和函式內部），但初始化的值不會提升。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;屬性綁定：&lt;/strong&gt;&#xA;在全域範疇中，使用 &lt;code&gt;var&lt;/code&gt; 宣告的變數會成為全域物件（window 或 globalThis）的屬性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;var-範例函式作用域&#34;&gt;var 範例（函式作用域）&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var x = 10;&#xA;console.log(window.x); // 10&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;let&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;作用域：&lt;/strong&gt;&#xA;&lt;code&gt;let&lt;/code&gt; 是區塊作用域（Block Scope），也就是變數僅在其所宣告的區塊 {} 內有效。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Hoisting（提升）：&lt;/strong&gt;&#xA;與 &lt;code&gt;var&lt;/code&gt; 不同，&lt;code&gt;let&lt;/code&gt; 變數在宣告之前不可訪問，會觸發「暫時性死區」（Temporal Dead Zone, TDZ）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;屬性綁定：&lt;/strong&gt;&#xA;在全域範疇中，使用 &lt;code&gt;let&lt;/code&gt; 宣告的變數不會成為全域物件的屬性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;let-範例區塊作用域&#34;&gt;let 範例（區塊作用域）&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let y = 20;&#xA;console.log(window.y); // undefined&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;const&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;作用域：&lt;/strong&gt;&#xA;與 &lt;code&gt;let&lt;/code&gt; 一樣，&lt;code&gt;const&lt;/code&gt; 是區塊作用域（Block Scope）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;不可重新賦值：&lt;/strong&gt;&#xA;&lt;code&gt;const&lt;/code&gt; 宣告的變數必須在宣告時初始化，且不能重新賦值。但如果該變數儲存的是物件，其屬性可以被修改。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Hoisting（提升）：&lt;/strong&gt;&#xA;同樣存在暫時性死區（TDZ），在宣告之前不可訪問。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;屬性綁定：&lt;/strong&gt;&#xA;使用 &lt;code&gt;const&lt;/code&gt; 宣告的變數，與 &lt;code&gt;let&lt;/code&gt; 一樣，不會成為全域物件的屬性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>閱讀筆記 - The Clean Coder 無暇程式碼番外篇 - 專業程式設計師的生存之道</title>
      <link>http://localhost:1313/post/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98---%E7%84%A1%E6%9A%87%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%95%AA%E5%A4%96%E7%AF%87/</link>
      <pubDate>Wed, 25 Dec 2024 14:47:55 +0800</pubDate>
      <guid>http://localhost:1313/post/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98---%E7%84%A1%E6%9A%87%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%95%AA%E5%A4%96%E7%AF%87/</guid>
      <description>&lt;h2 id=&#34;以下是我根據這本書中節錄的重點整理&#34;&gt;以下是我根據這本書中節錄的重點整理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ch1-專業主義&#34;&gt;CH1 專業主義&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不破壞軟體功能&lt;/li&gt;&#xA;&lt;li&gt;不破壞結構(軟體要易於修改)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;💡 &lt;strong&gt;不能銘記過去的人，註定重蹈先人的覆轍&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;ch2-說不&#34;&gt;CH2 說「不」&lt;/h3&gt;&#xA;&lt;p&gt;專業人士敢於說明真相而不屈從於權勢。有勇氣說「不」。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;💡 &lt;strong&gt;說「不」，才能真正做成一些事情。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;ch3-說是&#34;&gt;CH3 說「是」&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;避免「缺乏承諾」，若是無法達成應盡早向承諾的對象發出預警，越早、越快越好。&lt;/li&gt;&#xA;&lt;li&gt;專業人士對自己的能力極限瞭若指掌。&lt;/li&gt;&#xA;&lt;li&gt;回歸測試 ( Regression Testing ) 是當程式進行修改後，檢查修改前能正常執行的功能是否仍能無誤的執行。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;💡 &lt;strong&gt;專業人士不需要對所有的請求都回答「是」。不過，他們應該努力尋找創新的方法，盡可能做到有求必應。當專業人士給出肯定回答時，會使用「承諾用語」，以確保各方能無誤的明白及理解承諾的內容。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;ch4-寫程式&#34;&gt;CH4 寫程式&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;敲錯鍵盤時我自己能感覺到。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;精熟掌握每項技藝，關鍵都是要具備「信心」和「出錯感知」。&lt;/p&gt;&#xA;&lt;p&gt;樂觀預估、常規預估、悲觀預估&lt;/p&gt;&#xA;&lt;h3 id=&#34;ch5-測試驅動開發-tdd&#34;&gt;CH5 測試驅動開發 TDD&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;💡 &lt;strong&gt;事後寫的測試只是一種防守，先行編寫的測試則是進攻&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;ch7-驗收測試&#34;&gt;CH7 驗收測試&lt;/h3&gt;&#xA;&lt;p&gt;驗收測試和單元測試的對象通常是相同的，但絕對和「重複」沾不上邊。&lt;/p&gt;&#xA;&lt;p&gt;單元測試是深入系統內部進行，呼叫特定類別的方法；驗收測試則是在系統外部，通常是在 API 或 UI 層級進行。所以兩者的執行路徑截然不同。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ch9-時間管理&#34;&gt;CH9 時間管理&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;會議是必須的，但會議會浪費大量時間，沒有必要的會議應禮貌拒絕。&lt;/li&gt;&#xA;&lt;li&gt;Stand Up Meeting :&#xA;&lt;ol&gt;&#xA;&lt;li&gt;我昨天做了什麼?&lt;/li&gt;&#xA;&lt;li&gt;我今天預計做什麼?&lt;/li&gt;&#xA;&lt;li&gt;我遇到了什麼問題，需不需要協助?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Tue, 24 Dec 2024 17:22:18 +0800</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description></description>
    </item>
  </channel>
</rss>
