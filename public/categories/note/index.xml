<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Note on 資深菜鳥 Nick</title>
    <link>https://north13.github.io/categories/note/</link>
    <description>Recent content in Note on 資深菜鳥 Nick</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Dec 2024 14:47:55 +0800</lastBuildDate>
    <atom:link href="https://north13.github.io/categories/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>閱讀筆記 - The Clean Coder 無暇程式碼番外篇 - 專業程式設計師的生存之道</title>
      <link>https://north13.github.io/post/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98---%E7%84%A1%E6%9A%87%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%95%AA%E5%A4%96%E7%AF%87/</link>
      <pubDate>Wed, 25 Dec 2024 14:47:55 +0800</pubDate>
      <guid>https://north13.github.io/post/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98---%E7%84%A1%E6%9A%87%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%95%AA%E5%A4%96%E7%AF%87/</guid>
      <description>&lt;h2 id=&#34;以下是我根據這本書中節錄的重點整理&#34;&gt;以下是我根據這本書中節錄的重點整理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ch1-專業主義&#34;&gt;CH1 專業主義&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不破壞軟體功能&lt;/li&gt;&#xA;&lt;li&gt;不破壞結構(軟體要易於修改)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;💡 &lt;strong&gt;不能銘記過去的人，註定重蹈先人的覆轍&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;ch2-說不&#34;&gt;CH2 說「不」&lt;/h3&gt;&#xA;&lt;p&gt;專業人士敢於說明真相而不屈從於權勢。有勇氣說「不」。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;💡 &lt;strong&gt;說「不」，才能真正做成一些事情。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;ch3-說是&#34;&gt;CH3 說「是」&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;避免「缺乏承諾」，若是無法達成應盡早向承諾的對象發出預警，越早、越快越好。&lt;/li&gt;&#xA;&lt;li&gt;專業人士對自己的能力極限瞭若指掌。&lt;/li&gt;&#xA;&lt;li&gt;回歸測試 ( Regression Testing ) 是當程式進行修改後，檢查修改前能正常執行的功能是否仍能無誤的執行。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;💡 &lt;strong&gt;專業人士不需要對所有的請求都回答「是」。不過，他們應該努力尋找創新的方法，盡可能做到有求必應。當專業人士給出肯定回答時，會使用「承諾用語」，以確保各方能無誤的明白及理解承諾的內容。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;ch4-寫程式&#34;&gt;CH4 寫程式&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;敲錯鍵盤時我自己能感覺到。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;精熟掌握每項技藝，關鍵都是要具備「信心」和「出錯感知」。&lt;/p&gt;&#xA;&lt;p&gt;樂觀預估、常規預估、悲觀預估&lt;/p&gt;&#xA;&lt;h3 id=&#34;ch5-測試驅動開發-tdd&#34;&gt;CH5 測試驅動開發 TDD&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;💡 &lt;strong&gt;事後寫的測試只是一種防守，先行編寫的測試則是進攻&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;ch7-驗收測試&#34;&gt;CH7 驗收測試&lt;/h3&gt;&#xA;&lt;p&gt;驗收測試和單元測試的對象通常是相同的，但絕對和「重複」沾不上邊。&lt;/p&gt;&#xA;&lt;p&gt;單元測試是深入系統內部進行，呼叫特定類別的方法；驗收測試則是在系統外部，通常是在 API 或 UI 層級進行。所以兩者的執行路徑截然不同。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ch9-時間管理&#34;&gt;CH9 時間管理&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;會議是必須的，但會議會浪費大量時間，沒有必要的會議應禮貌拒絕。&lt;/li&gt;&#xA;&lt;li&gt;Stand Up Meeting :&#xA;&lt;ol&gt;&#xA;&lt;li&gt;我昨天做了什麼?&lt;/li&gt;&#xA;&lt;li&gt;我今天預計做什麼?&lt;/li&gt;&#xA;&lt;li&gt;我遇到了什麼問題，需不需要協助?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
